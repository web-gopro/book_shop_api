// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service.proto

package book_shop

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*User, error)
	GetUsers(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*UserGetListResp, error)
	UpdateUser(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
	CheckExists(ctx context.Context, in *Common, opts ...grpc.CallOption) (*CommonResp, error)
	UserLogin(ctx context.Context, in *UserLogIn, opts ...grpc.CallOption) (*Clamis, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/book_shop.User_service/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/book_shop.User_service/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*UserGetListResp, error) {
	out := new(UserGetListResp)
	err := c.cc.Invoke(ctx, "/book_shop.User_service/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/book_shop.User_service/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/book_shop.User_service/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckExists(ctx context.Context, in *Common, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/book_shop.User_service/CheckExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserLogin(ctx context.Context, in *UserLogIn, opts ...grpc.CallOption) (*Clamis, error) {
	out := new(Clamis)
	err := c.cc.Invoke(ctx, "/book_shop.User_service/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CreateUser(context.Context, *UserCreateReq) (*User, error)
	GetUser(context.Context, *GetByIdReq) (*User, error)
	GetUsers(context.Context, *GetListReq) (*UserGetListResp, error)
	UpdateUser(context.Context, *UserUpdateReq) (*User, error)
	DeleteUser(context.Context, *DeleteReq) (*Empty, error)
	CheckExists(context.Context, *Common) (*CommonResp, error)
	UserLogin(context.Context, *UserLogIn) (*Clamis, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *UserCreateReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetByIdReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) GetUsers(context.Context, *GetListReq) (*UserGetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UserUpdateReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) CheckExists(context.Context, *Common) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckExists not implemented")
}
func (UnimplementedUserServiceServer) UserLogin(context.Context, *UserLogIn) (*Clamis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.User_service/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*UserCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.User_service/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.User_service/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*GetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.User_service/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.User_service/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Common)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.User_service/CheckExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckExists(ctx, req.(*Common))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.User_service/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserLogin(ctx, req.(*UserLogIn))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book_shop.User_service",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "CheckExists",
			Handler:    _UserService_CheckExists_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _UserService_UserLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	CreateAuth(ctx context.Context, in *AuthorUpdateReq, opts ...grpc.CallOption) (*Author, error)
	GetAuth(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Author, error)
	GetAuths(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*AuthorGetListResp, error)
	UpdateAuth(ctx context.Context, in *AuthorUpdateReq, opts ...grpc.CallOption) (*User, error)
	DeleteAuth(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
	CreateCategory(ctx context.Context, in *CategoryCreateReq, opts ...grpc.CallOption) (*Category, error)
	GetCategory(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Category, error)
	GetCategories(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*CategoryGetListResp, error)
	UpdateCategory(ctx context.Context, in *CategoryUpdateReq, opts ...grpc.CallOption) (*Category, error)
	DeleteCategory(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
	CreateBook(ctx context.Context, in *BookCreateReq, opts ...grpc.CallOption) (*Book, error)
	GetBook(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Book, error)
	GetBooks(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*BookGetListResp, error)
	UpdateBook(ctx context.Context, in *BookUpdateReq, opts ...grpc.CallOption) (*Book, error)
	DeleteBook(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
	CreateOrder(ctx context.Context, in *OrderCreateReq, opts ...grpc.CallOption) (*Order, error)
	GetOrder(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Order, error)
	GetOrders(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*OrderGetListResp, error)
	Updateorder(ctx context.Context, in *OrderUpdateReq, opts ...grpc.CallOption) (*Order, error)
	DeleteOrder(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
	CreateOrdered_Item(ctx context.Context, in *OrderItemCreateReq, opts ...grpc.CallOption) (*OrderItem, error)
	GetOrdered_Item(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*OrderItem, error)
	GetOrdered_ItemByOrderId(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*OrderItemGetListResp, error)
	GetOrdered_Items(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*OrderItemGetListResp, error)
	UpdateOrdered_Item(ctx context.Context, in *OrderItemCreateReq, opts ...grpc.CallOption) (*OrderItem, error)
	DeleteOrdered_Item(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) CreateAuth(ctx context.Context, in *AuthorUpdateReq, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/CreateAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAuth(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/GetAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAuths(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*AuthorGetListResp, error) {
	out := new(AuthorGetListResp)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/GetAuths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateAuth(ctx context.Context, in *AuthorUpdateReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/UpdateAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteAuth(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/DeleteAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateCategory(ctx context.Context, in *CategoryCreateReq, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetCategory(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/GetCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetCategories(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*CategoryGetListResp, error) {
	out := new(CategoryGetListResp)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/GetCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateCategory(ctx context.Context, in *CategoryUpdateReq, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteCategory(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateBook(ctx context.Context, in *BookCreateReq, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/CreateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetBook(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/GetBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetBooks(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*BookGetListResp, error) {
	out := new(BookGetListResp)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/GetBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateBook(ctx context.Context, in *BookUpdateReq, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/UpdateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteBook(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/DeleteBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateOrder(ctx context.Context, in *OrderCreateReq, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetOrder(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetOrders(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*OrderGetListResp, error) {
	out := new(OrderGetListResp)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) Updateorder(ctx context.Context, in *OrderUpdateReq, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/Updateorder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteOrder(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/DeleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateOrdered_Item(ctx context.Context, in *OrderItemCreateReq, opts ...grpc.CallOption) (*OrderItem, error) {
	out := new(OrderItem)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/CreateOrdered_Item", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetOrdered_Item(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*OrderItem, error) {
	out := new(OrderItem)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/GetOrdered_Item", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetOrdered_ItemByOrderId(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*OrderItemGetListResp, error) {
	out := new(OrderItemGetListResp)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/GetOrdered_ItemByOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetOrdered_Items(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*OrderItemGetListResp, error) {
	out := new(OrderItemGetListResp)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/GetOrdered_Items", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateOrdered_Item(ctx context.Context, in *OrderItemCreateReq, opts ...grpc.CallOption) (*OrderItem, error) {
	out := new(OrderItem)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/UpdateOrdered_Item", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteOrdered_Item(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/book_shop.Product_service/DeleteOrdered_Item", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	CreateAuth(context.Context, *AuthorUpdateReq) (*Author, error)
	GetAuth(context.Context, *GetByIdReq) (*Author, error)
	GetAuths(context.Context, *GetListReq) (*AuthorGetListResp, error)
	UpdateAuth(context.Context, *AuthorUpdateReq) (*User, error)
	DeleteAuth(context.Context, *DeleteReq) (*Empty, error)
	CreateCategory(context.Context, *CategoryCreateReq) (*Category, error)
	GetCategory(context.Context, *GetByIdReq) (*Category, error)
	GetCategories(context.Context, *GetListReq) (*CategoryGetListResp, error)
	UpdateCategory(context.Context, *CategoryUpdateReq) (*Category, error)
	DeleteCategory(context.Context, *DeleteReq) (*Empty, error)
	CreateBook(context.Context, *BookCreateReq) (*Book, error)
	GetBook(context.Context, *GetByIdReq) (*Book, error)
	GetBooks(context.Context, *GetListReq) (*BookGetListResp, error)
	UpdateBook(context.Context, *BookUpdateReq) (*Book, error)
	DeleteBook(context.Context, *DeleteReq) (*Empty, error)
	CreateOrder(context.Context, *OrderCreateReq) (*Order, error)
	GetOrder(context.Context, *GetByIdReq) (*Order, error)
	GetOrders(context.Context, *GetListReq) (*OrderGetListResp, error)
	Updateorder(context.Context, *OrderUpdateReq) (*Order, error)
	DeleteOrder(context.Context, *DeleteReq) (*Empty, error)
	CreateOrdered_Item(context.Context, *OrderItemCreateReq) (*OrderItem, error)
	GetOrdered_Item(context.Context, *GetByIdReq) (*OrderItem, error)
	GetOrdered_ItemByOrderId(context.Context, *GetByIdReq) (*OrderItemGetListResp, error)
	GetOrdered_Items(context.Context, *GetListReq) (*OrderItemGetListResp, error)
	UpdateOrdered_Item(context.Context, *OrderItemCreateReq) (*OrderItem, error)
	DeleteOrdered_Item(context.Context, *DeleteReq) (*Empty, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) CreateAuth(context.Context, *AuthorUpdateReq) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuth not implemented")
}
func (UnimplementedProductServiceServer) GetAuth(context.Context, *GetByIdReq) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuth not implemented")
}
func (UnimplementedProductServiceServer) GetAuths(context.Context, *GetListReq) (*AuthorGetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuths not implemented")
}
func (UnimplementedProductServiceServer) UpdateAuth(context.Context, *AuthorUpdateReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuth not implemented")
}
func (UnimplementedProductServiceServer) DeleteAuth(context.Context, *DeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuth not implemented")
}
func (UnimplementedProductServiceServer) CreateCategory(context.Context, *CategoryCreateReq) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedProductServiceServer) GetCategory(context.Context, *GetByIdReq) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedProductServiceServer) GetCategories(context.Context, *GetListReq) (*CategoryGetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedProductServiceServer) UpdateCategory(context.Context, *CategoryUpdateReq) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedProductServiceServer) DeleteCategory(context.Context, *DeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedProductServiceServer) CreateBook(context.Context, *BookCreateReq) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedProductServiceServer) GetBook(context.Context, *GetByIdReq) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedProductServiceServer) GetBooks(context.Context, *GetListReq) (*BookGetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedProductServiceServer) UpdateBook(context.Context, *BookUpdateReq) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedProductServiceServer) DeleteBook(context.Context, *DeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedProductServiceServer) CreateOrder(context.Context, *OrderCreateReq) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedProductServiceServer) GetOrder(context.Context, *GetByIdReq) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedProductServiceServer) GetOrders(context.Context, *GetListReq) (*OrderGetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedProductServiceServer) Updateorder(context.Context, *OrderUpdateReq) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updateorder not implemented")
}
func (UnimplementedProductServiceServer) DeleteOrder(context.Context, *DeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedProductServiceServer) CreateOrdered_Item(context.Context, *OrderItemCreateReq) (*OrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrdered_Item not implemented")
}
func (UnimplementedProductServiceServer) GetOrdered_Item(context.Context, *GetByIdReq) (*OrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdered_Item not implemented")
}
func (UnimplementedProductServiceServer) GetOrdered_ItemByOrderId(context.Context, *GetByIdReq) (*OrderItemGetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdered_ItemByOrderId not implemented")
}
func (UnimplementedProductServiceServer) GetOrdered_Items(context.Context, *GetListReq) (*OrderItemGetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdered_Items not implemented")
}
func (UnimplementedProductServiceServer) UpdateOrdered_Item(context.Context, *OrderItemCreateReq) (*OrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrdered_Item not implemented")
}
func (UnimplementedProductServiceServer) DeleteOrdered_Item(context.Context, *DeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrdered_Item not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_CreateAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/CreateAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateAuth(ctx, req.(*AuthorUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/GetAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAuth(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAuths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAuths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/GetAuths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAuths(ctx, req.(*GetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/UpdateAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateAuth(ctx, req.(*AuthorUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/DeleteAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteAuth(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateCategory(ctx, req.(*CategoryCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetCategory(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/GetCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetCategories(ctx, req.(*GetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateCategory(ctx, req.(*CategoryUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteCategory(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateBook(ctx, req.(*BookCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetBook(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/GetBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetBooks(ctx, req.(*GetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/UpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateBook(ctx, req.(*BookUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/DeleteBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteBook(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateOrder(ctx, req.(*OrderCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetOrder(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetOrders(ctx, req.(*GetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_Updateorder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).Updateorder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/Updateorder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).Updateorder(ctx, req.(*OrderUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteOrder(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateOrdered_Item_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateOrdered_Item(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/CreateOrdered_Item",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateOrdered_Item(ctx, req.(*OrderItemCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetOrdered_Item_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetOrdered_Item(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/GetOrdered_Item",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetOrdered_Item(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetOrdered_ItemByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetOrdered_ItemByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/GetOrdered_ItemByOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetOrdered_ItemByOrderId(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetOrdered_Items_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetOrdered_Items(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/GetOrdered_Items",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetOrdered_Items(ctx, req.(*GetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateOrdered_Item_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateOrdered_Item(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/UpdateOrdered_Item",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateOrdered_Item(ctx, req.(*OrderItemCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteOrdered_Item_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteOrdered_Item(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_shop.Product_service/DeleteOrdered_Item",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteOrdered_Item(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book_shop.Product_service",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuth",
			Handler:    _ProductService_CreateAuth_Handler,
		},
		{
			MethodName: "GetAuth",
			Handler:    _ProductService_GetAuth_Handler,
		},
		{
			MethodName: "GetAuths",
			Handler:    _ProductService_GetAuths_Handler,
		},
		{
			MethodName: "UpdateAuth",
			Handler:    _ProductService_UpdateAuth_Handler,
		},
		{
			MethodName: "DeleteAuth",
			Handler:    _ProductService_DeleteAuth_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _ProductService_CreateCategory_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _ProductService_GetCategory_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _ProductService_GetCategories_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _ProductService_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _ProductService_DeleteCategory_Handler,
		},
		{
			MethodName: "CreateBook",
			Handler:    _ProductService_CreateBook_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _ProductService_GetBook_Handler,
		},
		{
			MethodName: "GetBooks",
			Handler:    _ProductService_GetBooks_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _ProductService_UpdateBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _ProductService_DeleteBook_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _ProductService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _ProductService_GetOrder_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _ProductService_GetOrders_Handler,
		},
		{
			MethodName: "Updateorder",
			Handler:    _ProductService_Updateorder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _ProductService_DeleteOrder_Handler,
		},
		{
			MethodName: "CreateOrdered_Item",
			Handler:    _ProductService_CreateOrdered_Item_Handler,
		},
		{
			MethodName: "GetOrdered_Item",
			Handler:    _ProductService_GetOrdered_Item_Handler,
		},
		{
			MethodName: "GetOrdered_ItemByOrderId",
			Handler:    _ProductService_GetOrdered_ItemByOrderId_Handler,
		},
		{
			MethodName: "GetOrdered_Items",
			Handler:    _ProductService_GetOrdered_Items_Handler,
		},
		{
			MethodName: "UpdateOrdered_Item",
			Handler:    _ProductService_UpdateOrdered_Item_Handler,
		},
		{
			MethodName: "DeleteOrdered_Item",
			Handler:    _ProductService_DeleteOrdered_Item_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
